#pragma kernel blur
#pragma kernel time_interpolate
#pragma kernel copy_result

RWTexture2D<float4> Result;
RWTexture2D<float4> Input;
RWTexture2D<float4> Old;

[numthreads(8,8,1)]
void time_interpolate(uint3 id: SV_DispatchThreadID) {
    const float oldRatio = 0.93;
    const float cutoff = 6.0;
    uint2 pos = id.xy;
    float useOld = step(abs(Old[pos].r-Input[pos].r),cutoff) * oldRatio;
    Input[pos] = lerp(Input[pos],Old[pos],useOld);
    Old[pos] = Input[pos];
}

[numthreads(8,8,1)]
void blur (uint3 id : SV_DispatchThreadID)
{
    float tot = Input[id.xy + uint2(0,-2)].r * 7;

    tot += Input[id.xy + uint2(-1,-1)].r * 16;
    tot += Input[id.xy + uint2(0,-1)].r * 26;
    tot += Input[id.xy + uint2(1,-1)].r * 16;

    tot += Input[id.xy + uint2(-2,0)].r * 7;
    tot += Input[id.xy + uint2(-1,0)].r * 26;
    tot += Input[id.xy + uint2(0,0)].r * 41;
    tot += Input[id.xy + uint2(1,0)].r * 26;
    tot += Input[id.xy + uint2(2,0)].r * 7;

    tot += Input[id.xy + uint2(-1,1)].r * 16;
    tot += Input[id.xy + uint2(0,1)].r * 26;
    tot += Input[id.xy + uint2(1,1)].r * 16;

    tot += Input[id.xy + uint2(0,2)].r * 7;
    Result[id.xy] = tot / 237;
}

[numthreads(8,8,1)]
void copy_result(uint3 id: SV_DispatchThreadID) {
    Result[id.xy] = Input[id.xy];
}
